   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 1698              		.align	2
 1699              		.global	tmr_set_prescaler
 1701              	tmr_set_prescaler:
 1702              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** 
   4:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   5:../timer.c    **** *********************************************************************************************/
   6:../timer.c    **** 
   7:../timer.c    **** /*--- ficheros de cabecera ---*/
   8:../timer.c    **** #include "44b.h"
   9:../timer.c    **** #include "timer.h"
  10:../timer.c    **** 
  11:../timer.c    **** int tmr_set_prescaler(int p, int  value)
  12:../timer.c    **** {
 1703              		.loc 1 12 0
 1704              		.cfi_startproc
 1705              		@ Function supports interworking.
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708 0000 0DC0A0E1 		mov	ip, sp
 1709              	.LCFI0:
 1710              		.cfi_def_cfa_register 12
 1711 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1712 0008 04B04CE2 		sub	fp, ip, #4
 1713              		.cfi_offset 14, -8
 1714              		.cfi_offset 13, -12
 1715              		.cfi_offset 11, -16
 1716              	.LCFI1:
 1717              		.cfi_def_cfa 11, 4
 1718 000c 10D04DE2 		sub	sp, sp, #16
 1719 0010 18000BE5 		str	r0, [fp, #-24]
 1720 0014 1C100BE5 		str	r1, [fp, #-28]
  13:../timer.c    **** 	int offset = p*4;
 1721              		.loc 1 13 0
 1722 0018 18301BE5 		ldr	r3, [fp, #-24]
 1723 001c 0331A0E1 		mov	r3, r3, asl #2
 1724 0020 10300BE5 		str	r3, [fp, #-16]
  14:../timer.c    **** 	if (p==1 || p==3 || p==5)
 1725              		.loc 1 14 0
 1726 0024 18301BE5 		ldr	r3, [fp, #-24]
 1727 0028 010053E3 		cmp	r3, #1
 1728 002c 0500000A 		beq	.L2
 1729              		.loc 1 14 0 is_stmt 0 discriminator 1
 1730 0030 18301BE5 		ldr	r3, [fp, #-24]
 1731 0034 030053E3 		cmp	r3, #3
 1732 0038 0200000A 		beq	.L2
 1733 003c 18301BE5 		ldr	r3, [fp, #-24]
 1734 0040 050053E3 		cmp	r3, #5
 1735 0044 0200001A 		bne	.L3
 1736              	.L2:
  15:../timer.c    **** 		offset = offset -4;
 1737              		.loc 1 15 0 is_stmt 1
 1738 0048 10301BE5 		ldr	r3, [fp, #-16]
 1739 004c 043043E2 		sub	r3, r3, #4
 1740 0050 10300BE5 		str	r3, [fp, #-16]
 1741              	.L3:
  16:../timer.c    **** 
  17:../timer.c    **** 	value &= 0xFF;
 1742              		.loc 1 17 0
 1743 0054 1C301BE5 		ldr	r3, [fp, #-28]
 1744 0058 FF3003E2 		and	r3, r3, #255
 1745 005c 1C300BE5 		str	r3, [fp, #-28]
  18:../timer.c    **** 
  19:../timer.c    **** 	if (p < 0 || p > 5)
 1746              		.loc 1 19 0
 1747 0060 18301BE5 		ldr	r3, [fp, #-24]
 1748 0064 000053E3 		cmp	r3, #0
 1749 0068 020000BA 		blt	.L4
 1750              		.loc 1 19 0 is_stmt 0 discriminator 1
 1751 006c 18301BE5 		ldr	r3, [fp, #-24]
 1752 0070 050053E3 		cmp	r3, #5
 1753 0074 010000DA 		ble	.L5
 1754              	.L4:
  20:../timer.c    **** 		return -1;
 1755              		.loc 1 20 0 is_stmt 1
 1756 0078 0030E0E3 		mvn	r3, #0
 1757 007c 110000EA 		b	.L6
 1758              	.L5:
  21:../timer.c    **** 
  22:../timer.c    **** 	//COMPLETAR: escribir el valor value a partir de la posición offset en el
  23:../timer.c    **** 	//registro rTCFG0, para establecer el valor de pre-escalado del módulo p
  24:../timer.c    **** 	//value es el valor de prescalado y p es el número del TIMER
  25:../timer.c    **** 
  26:../timer.c    **** 	rTCFG0 &=~(value << offset);
 1759              		.loc 1 26 0
 1760 0080 50309FE5 		ldr	r3, .L7
 1761 0084 4C209FE5 		ldr	r2, .L7
 1762 0088 001092E5 		ldr	r1, [r2, #0]
 1763 008c 1C001BE5 		ldr	r0, [fp, #-28]
 1764 0090 10201BE5 		ldr	r2, [fp, #-16]
 1765 0094 1022A0E1 		mov	r2, r0, asl r2
 1766 0098 0220E0E1 		mvn	r2, r2
 1767 009c 022001E0 		and	r2, r1, r2
 1768 00a0 002083E5 		str	r2, [r3, #0]
  27:../timer.c    **** 
  28:../timer.c    **** 	rTCFG0 |=(value << offset);
 1769              		.loc 1 28 0
 1770 00a4 2C309FE5 		ldr	r3, .L7
 1771 00a8 28209FE5 		ldr	r2, .L7
 1772 00ac 001092E5 		ldr	r1, [r2, #0]
 1773 00b0 1C001BE5 		ldr	r0, [fp, #-28]
 1774 00b4 10201BE5 		ldr	r2, [fp, #-16]
 1775 00b8 1022A0E1 		mov	r2, r0, asl r2
 1776 00bc 022081E1 		orr	r2, r1, r2
 1777 00c0 002083E5 		str	r2, [r3, #0]
  29:../timer.c    **** 
  30:../timer.c    **** 	return 0;
 1778              		.loc 1 30 0
 1779 00c4 0030A0E3 		mov	r3, #0
 1780              	.L6:
  31:../timer.c    **** }
 1781              		.loc 1 31 0
 1782 00c8 0300A0E1 		mov	r0, r3
 1783 00cc 0CD04BE2 		sub	sp, fp, #12
 1784 00d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1785 00d4 1EFF2FE1 		bx	lr
 1786              	.L8:
 1787              		.align	2
 1788              	.L7:
 1789 00d8 0000D501 		.word	30736384
 1790              		.cfi_endproc
 1791              	.LFE0:
 1793              		.align	2
 1794              		.global	tmr_set_divider
 1796              	tmr_set_divider:
 1797              	.LFB1:
  32:../timer.c    **** 
  33:../timer.c    **** int tmr_set_divider(int d, enum tmr_div div)
  34:../timer.c    **** {
 1798              		.loc 1 34 0
 1799              		.cfi_startproc
 1800              		@ Function supports interworking.
 1801              		@ args = 0, pretend = 0, frame = 16
 1802              		@ frame_needed = 1, uses_anonymous_args = 0
 1803 00dc 0DC0A0E1 		mov	ip, sp
 1804              	.LCFI2:
 1805              		.cfi_def_cfa_register 12
 1806 00e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1807 00e4 04B04CE2 		sub	fp, ip, #4
 1808              		.cfi_offset 14, -8
 1809              		.cfi_offset 13, -12
 1810              		.cfi_offset 11, -16
 1811              	.LCFI3:
 1812              		.cfi_def_cfa 11, 4
 1813 00e8 10D04DE2 		sub	sp, sp, #16
 1814 00ec 18000BE5 		str	r0, [fp, #-24]
 1815 00f0 0130A0E1 		mov	r3, r1
 1816 00f4 19304BE5 		strb	r3, [fp, #-25]
  35:../timer.c    **** 	int ret = 0;
 1817              		.loc 1 35 0
 1818 00f8 0030A0E3 		mov	r3, #0
 1819 00fc 10300BE5 		str	r3, [fp, #-16]
  36:../timer.c    **** 	int pos = d*4;
 1820              		.loc 1 36 0
 1821 0100 18301BE5 		ldr	r3, [fp, #-24]
 1822 0104 0331A0E1 		mov	r3, r3, asl #2
 1823 0108 14300BE5 		str	r3, [fp, #-20]
  37:../timer.c    **** 
  38:../timer.c    **** 	if ((d < 0 || d > 5) ||
 1824              		.loc 1 38 0
 1825 010c 18301BE5 		ldr	r3, [fp, #-24]
 1826 0110 000053E3 		cmp	r3, #0
 1827 0114 140000BA 		blt	.L10
 1828              		.loc 1 38 0 is_stmt 0 discriminator 1
 1829 0118 18301BE5 		ldr	r3, [fp, #-24]
 1830 011c 050053E3 		cmp	r3, #5
 1831 0120 110000CA 		bgt	.L10
 1832 0124 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1833 0128 040053E3 		cmp	r3, #4
 1834 012c 0200001A 		bne	.L11
  39:../timer.c    **** 			(div == D1_32 && d > 3) ||
 1835              		.loc 1 39 0 is_stmt 1
 1836 0130 18301BE5 		ldr	r3, [fp, #-24]
 1837 0134 030053E3 		cmp	r3, #3
 1838 0138 0B0000CA 		bgt	.L10
 1839              	.L11:
 1840              		.loc 1 39 0 is_stmt 0 discriminator 1
 1841 013c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1842 0140 050053E3 		cmp	r3, #5
 1843 0144 0200001A 		bne	.L12
  40:../timer.c    **** 			(div == EXTCLK && d != 5) ||
 1844              		.loc 1 40 0 is_stmt 1
 1845 0148 18301BE5 		ldr	r3, [fp, #-24]
 1846 014c 050053E3 		cmp	r3, #5
 1847 0150 0500001A 		bne	.L10
 1848              	.L12:
 1849              		.loc 1 40 0 is_stmt 0 discriminator 1
 1850 0154 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1851 0158 060053E3 		cmp	r3, #6
 1852 015c 0400001A 		bne	.L13
  41:../timer.c    **** 			(div == TCLK && d != 4))
 1853              		.loc 1 41 0 is_stmt 1
 1854 0160 18301BE5 		ldr	r3, [fp, #-24]
 1855 0164 040053E3 		cmp	r3, #4
 1856 0168 0100000A 		beq	.L13
 1857              	.L10:
  42:../timer.c    **** 		ret = -1;
 1858              		.loc 1 42 0
 1859 016c 0030E0E3 		mvn	r3, #0
 1860 0170 10300BE5 		str	r3, [fp, #-16]
 1861              	.L13:
  43:../timer.c    **** 
  44:../timer.c    **** 	if (div == EXTCLK || div == TCLK)
 1862              		.loc 1 44 0
 1863 0174 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1864 0178 050053E3 		cmp	r3, #5
 1865 017c 0200000A 		beq	.L14
 1866              		.loc 1 44 0 is_stmt 0 discriminator 1
 1867 0180 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1868 0184 060053E3 		cmp	r3, #6
 1869 0188 0100001A 		bne	.L15
 1870              	.L14:
  45:../timer.c    **** 		div = 4;
 1871              		.loc 1 45 0 is_stmt 1
 1872 018c 0430A0E3 		mov	r3, #4
 1873 0190 19304BE5 		strb	r3, [fp, #-25]
 1874              	.L15:
  46:../timer.c    **** 
  47:../timer.c    **** 	//COMPLETAR: escribir el valor div a partir de la posición pos en el
  48:../timer.c    **** 	//registro rTCFG1 para establecer el valor para el divisor d
  49:../timer.c    **** 	/**
  50:../timer.c    **** 	 * La señal de reloj efectiva para los temporizadores es:
  51:../timer.c    **** 	 * F = MCLK= ((valor de pre-escalado + 1)(valor del divisor))
  52:../timer.c    **** 	 * donde, MCLK es la señal interna de reloj, el valor de pre-escalado está en el intervalo
  53:../timer.c    **** 	 * 0􀀀255 y el valor del divisor: 2; 4; 8; 16; 32. El valor de pre-escalado para los temporizado
  54:../timer.c    **** 	 * se configura en el registro TCFG0,he supuesto que para el TCFG1 funciona igual
  55:../timer.c    **** 	 * */
  56:../timer.c    **** 	rTCFG1 &=~(0x7<<pos);
 1875              		.loc 1 56 0
 1876 0194 50309FE5 		ldr	r3, .L16
 1877 0198 4C209FE5 		ldr	r2, .L16
 1878 019c 001092E5 		ldr	r1, [r2, #0]
 1879 01a0 0700A0E3 		mov	r0, #7
 1880 01a4 14201BE5 		ldr	r2, [fp, #-20]
 1881 01a8 1022A0E1 		mov	r2, r0, asl r2
 1882 01ac 0220E0E1 		mvn	r2, r2
 1883 01b0 022001E0 		and	r2, r1, r2
 1884 01b4 002083E5 		str	r2, [r3, #0]
  57:../timer.c    **** 	rTCFG1 |=(div << pos);
 1885              		.loc 1 57 0
 1886 01b8 2C309FE5 		ldr	r3, .L16
 1887 01bc 28209FE5 		ldr	r2, .L16
 1888 01c0 001092E5 		ldr	r1, [r2, #0]
 1889 01c4 19005BE5 		ldrb	r0, [fp, #-25]	@ zero_extendqisi2
 1890 01c8 14201BE5 		ldr	r2, [fp, #-20]
 1891 01cc 1022A0E1 		mov	r2, r0, asl r2
 1892 01d0 022081E1 		orr	r2, r1, r2
 1893 01d4 002083E5 		str	r2, [r3, #0]
  58:../timer.c    **** 
  59:../timer.c    **** 
  60:../timer.c    **** 	return ret;
 1894              		.loc 1 60 0
 1895 01d8 10301BE5 		ldr	r3, [fp, #-16]
  61:../timer.c    **** }
 1896              		.loc 1 61 0
 1897 01dc 0300A0E1 		mov	r0, r3
 1898 01e0 0CD04BE2 		sub	sp, fp, #12
 1899 01e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1900 01e8 1EFF2FE1 		bx	lr
 1901              	.L17:
 1902              		.align	2
 1903              	.L16:
 1904 01ec 0400D501 		.word	30736388
 1905              		.cfi_endproc
 1906              	.LFE1:
 1908              		.align	2
 1909              		.global	tmr_set_count
 1911              	tmr_set_count:
 1912              	.LFB2:
  62:../timer.c    **** 
  63:../timer.c    **** int tmr_set_count(enum tmr_timer t, int count, int cmp)
  64:../timer.c    **** {
 1913              		.loc 1 64 0
 1914              		.cfi_startproc
 1915              		@ Function supports interworking.
 1916              		@ args = 0, pretend = 0, frame = 24
 1917              		@ frame_needed = 1, uses_anonymous_args = 0
 1918 01f0 0DC0A0E1 		mov	ip, sp
 1919              	.LCFI4:
 1920              		.cfi_def_cfa_register 12
 1921 01f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1922 01f8 04B04CE2 		sub	fp, ip, #4
 1923              		.cfi_offset 14, -8
 1924              		.cfi_offset 13, -12
 1925              		.cfi_offset 11, -16
 1926              	.LCFI5:
 1927              		.cfi_def_cfa 11, 4
 1928 01fc 18D04DE2 		sub	sp, sp, #24
 1929 0200 0030A0E1 		mov	r3, r0
 1930 0204 1C100BE5 		str	r1, [fp, #-28]
 1931 0208 20200BE5 		str	r2, [fp, #-32]
 1932 020c 15304BE5 		strb	r3, [fp, #-21]
  65:../timer.c    **** 	int err = 0;
 1933              		.loc 1 65 0
 1934 0210 0030A0E3 		mov	r3, #0
 1935 0214 10300BE5 		str	r3, [fp, #-16]
  66:../timer.c    **** 	switch (t) {
 1936              		.loc 1 66 0
 1937 0218 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1938 021c 050053E3 		cmp	r3, #5
 1939 0220 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1940 0224 2C0000EA 		b	.L19
 1941              	.L26:
 1942 0228 40020000 		.word	.L20
 1943 022c 5C020000 		.word	.L21
 1944 0230 78020000 		.word	.L22
 1945 0234 94020000 		.word	.L23
 1946 0238 B0020000 		.word	.L24
 1947 023c CC020000 		.word	.L25
 1948              	.L20:
  67:../timer.c    **** 		case TIMER0:
  68:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  69:../timer.c    **** 			//comparación cmp en los registros de buffer del timer0 (rTCNTB0 y
  70:../timer.c    **** 			//rTCMPB0)
  71:../timer.c    **** 			rTCNTB0 = count;
 1949              		.loc 1 71 0
 1950 0240 B0309FE5 		ldr	r3, .L28
 1951 0244 1C201BE5 		ldr	r2, [fp, #-28]
 1952 0248 002083E5 		str	r2, [r3, #0]
  72:../timer.c    **** 			rTCMPB0 = cmp;
 1953              		.loc 1 72 0
 1954 024c A8309FE5 		ldr	r3, .L28+4
 1955 0250 20201BE5 		ldr	r2, [fp, #-32]
 1956 0254 002083E5 		str	r2, [r3, #0]
  73:../timer.c    **** 
  74:../timer.c    **** 			break;
 1957              		.loc 1 74 0
 1958 0258 210000EA 		b	.L27
 1959              	.L21:
  75:../timer.c    **** 		case TIMER1:
  76:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  77:../timer.c    **** 			//comparación cmp en los registros de buffer del timer1 (rTCNTB1 y
  78:../timer.c    **** 			//rTCMPB1)
  79:../timer.c    **** 			rTCNTB1 =count;
 1960              		.loc 1 79 0
 1961 025c 9C309FE5 		ldr	r3, .L28+8
 1962 0260 1C201BE5 		ldr	r2, [fp, #-28]
 1963 0264 002083E5 		str	r2, [r3, #0]
  80:../timer.c    **** 			rTCMPB1 = cmp;
 1964              		.loc 1 80 0
 1965 0268 94309FE5 		ldr	r3, .L28+12
 1966 026c 20201BE5 		ldr	r2, [fp, #-32]
 1967 0270 002083E5 		str	r2, [r3, #0]
  81:../timer.c    **** 			 break;
 1968              		.loc 1 81 0
 1969 0274 1A0000EA 		b	.L27
 1970              	.L22:
  82:../timer.c    **** 		case TIMER2:
  83:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  84:../timer.c    **** 			//comparación cmp en los registros de buffer del timer2 (rTCNTB2 y
  85:../timer.c    **** 			//rTCMPB2)
  86:../timer.c    **** 			rTCNTB2 = count;
 1971              		.loc 1 86 0
 1972 0278 88309FE5 		ldr	r3, .L28+16
 1973 027c 1C201BE5 		ldr	r2, [fp, #-28]
 1974 0280 002083E5 		str	r2, [r3, #0]
  87:../timer.c    **** 			rTCMPB2 = cmp;
 1975              		.loc 1 87 0
 1976 0284 80309FE5 		ldr	r3, .L28+20
 1977 0288 20201BE5 		ldr	r2, [fp, #-32]
 1978 028c 002083E5 		str	r2, [r3, #0]
  88:../timer.c    **** 
  89:../timer.c    **** 			 break;
 1979              		.loc 1 89 0
 1980 0290 130000EA 		b	.L27
 1981              	.L23:
  90:../timer.c    **** 		case TIMER3:
  91:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  92:../timer.c    **** 			//comparaciónn cmp en los registros de buffer del timer3 (rTCNTB3 y
  93:../timer.c    **** 			//rTCMPB3)
  94:../timer.c    **** 			rTCNTB3 = count;
 1982              		.loc 1 94 0
 1983 0294 74309FE5 		ldr	r3, .L28+24
 1984 0298 1C201BE5 		ldr	r2, [fp, #-28]
 1985 029c 002083E5 		str	r2, [r3, #0]
  95:../timer.c    **** 			rTCMPB3 = cmp;
 1986              		.loc 1 95 0
 1987 02a0 6C309FE5 		ldr	r3, .L28+28
 1988 02a4 20201BE5 		ldr	r2, [fp, #-32]
 1989 02a8 002083E5 		str	r2, [r3, #0]
  96:../timer.c    **** 
  97:../timer.c    **** 			 break;
 1990              		.loc 1 97 0
 1991 02ac 0C0000EA 		b	.L27
 1992              	.L24:
  98:../timer.c    **** 		case TIMER4:
  99:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
 100:../timer.c    **** 			//comparación cmp en los registros de buffer del timer4 (rTCNTB4 y
 101:../timer.c    **** 			//rTCMPB4)
 102:../timer.c    **** 
 103:../timer.c    **** 			rTCNTB4 = count;
 1993              		.loc 1 103 0
 1994 02b0 60309FE5 		ldr	r3, .L28+32
 1995 02b4 1C201BE5 		ldr	r2, [fp, #-28]
 1996 02b8 002083E5 		str	r2, [r3, #0]
 104:../timer.c    **** 			rTCMPB4 = cmp;
 1997              		.loc 1 104 0
 1998 02bc 58309FE5 		ldr	r3, .L28+36
 1999 02c0 20201BE5 		ldr	r2, [fp, #-32]
 2000 02c4 002083E5 		str	r2, [r3, #0]
 105:../timer.c    **** 			 break;
 2001              		.loc 1 105 0
 2002 02c8 050000EA 		b	.L27
 2003              	.L25:
 106:../timer.c    **** 		case TIMER5:
 107:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count
 108:../timer.c    **** 			//en el registro de buffer del timer5 (rTCNTB5)
 109:../timer.c    **** 
 110:../timer.c    **** 			rTCNTB5 = count;
 2004              		.loc 1 110 0
 2005 02cc 4C309FE5 		ldr	r3, .L28+40
 2006 02d0 1C201BE5 		ldr	r2, [fp, #-28]
 2007 02d4 002083E5 		str	r2, [r3, #0]
 111:../timer.c    **** 			 break;
 2008              		.loc 1 111 0
 2009 02d8 010000EA 		b	.L27
 2010              	.L19:
 112:../timer.c    **** 		default:
 113:../timer.c    **** 			err = -1;
 2011              		.loc 1 113 0
 2012 02dc 0030E0E3 		mvn	r3, #0
 2013 02e0 10300BE5 		str	r3, [fp, #-16]
 2014              	.L27:
 114:../timer.c    **** 	}
 115:../timer.c    **** 
 116:../timer.c    **** 	return err;
 2015              		.loc 1 116 0
 2016 02e4 10301BE5 		ldr	r3, [fp, #-16]
 117:../timer.c    **** }
 2017              		.loc 1 117 0
 2018 02e8 0300A0E1 		mov	r0, r3
 2019 02ec 0CD04BE2 		sub	sp, fp, #12
 2020 02f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2021 02f4 1EFF2FE1 		bx	lr
 2022              	.L29:
 2023              		.align	2
 2024              	.L28:
 2025 02f8 0C00D501 		.word	30736396
 2026 02fc 1000D501 		.word	30736400
 2027 0300 1800D501 		.word	30736408
 2028 0304 1C00D501 		.word	30736412
 2029 0308 2400D501 		.word	30736420
 2030 030c 2800D501 		.word	30736424
 2031 0310 3000D501 		.word	30736432
 2032 0314 3400D501 		.word	30736436
 2033 0318 3C00D501 		.word	30736444
 2034 031c 4000D501 		.word	30736448
 2035 0320 4800D501 		.word	30736456
 2036              		.cfi_endproc
 2037              	.LFE2:
 2039              		.align	2
 2040              		.global	tmr_update
 2042              	tmr_update:
 2043              	.LFB3:
 118:../timer.c    **** 
 119:../timer.c    **** int tmr_update(enum tmr_timer t)
 120:../timer.c    **** {
 2044              		.loc 1 120 0
 2045              		.cfi_startproc
 2046              		@ Function supports interworking.
 2047              		@ args = 0, pretend = 0, frame = 16
 2048              		@ frame_needed = 1, uses_anonymous_args = 0
 2049 0324 0DC0A0E1 		mov	ip, sp
 2050              	.LCFI6:
 2051              		.cfi_def_cfa_register 12
 2052 0328 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2053 032c 04B04CE2 		sub	fp, ip, #4
 2054              		.cfi_offset 14, -8
 2055              		.cfi_offset 13, -12
 2056              		.cfi_offset 11, -16
 2057              	.LCFI7:
 2058              		.cfi_def_cfa 11, 4
 2059 0330 10D04DE2 		sub	sp, sp, #16
 2060 0334 0030A0E1 		mov	r3, r0
 2061 0338 15304BE5 		strb	r3, [fp, #-21]
 121:../timer.c    **** 	int pos = t*4;
 2062              		.loc 1 121 0
 2063 033c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2064 0340 0331A0E1 		mov	r3, r3, asl #2
 2065 0344 10300BE5 		str	r3, [fp, #-16]
 122:../timer.c    **** 	if (t > 0)
 2066              		.loc 1 122 0
 2067 0348 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2068 034c 000053E3 		cmp	r3, #0
 2069 0350 0200000A 		beq	.L31
 123:../timer.c    **** 		pos += 4;
 2070              		.loc 1 123 0
 2071 0354 10301BE5 		ldr	r3, [fp, #-16]
 2072 0358 043083E2 		add	r3, r3, #4
 2073 035c 10300BE5 		str	r3, [fp, #-16]
 2074              	.L31:
 124:../timer.c    **** 
 125:../timer.c    **** 	if (t < 0 || t > 5)
 2075              		.loc 1 125 0
 2076 0360 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2077 0364 050053E3 		cmp	r3, #5
 2078 0368 0100009A 		bls	.L32
 126:../timer.c    **** 		return -1;
 2079              		.loc 1 126 0
 2080 036c 0030E0E3 		mvn	r3, #0
 2081 0370 110000EA 		b	.L33
 2082              	.L32:
 127:../timer.c    **** 
 128:../timer.c    **** 	//COMPLETAR: Dar el valor adecuado al bit manual update del registro rTCON
 129:../timer.c    **** 	//a partir de la posición pos (segundo bit a partir de esta posición)
 130:../timer.c    **** 	// primero para actualizar los registros rTCNTBn y rTCMPBn
 131:../timer.c    **** 	//después para ponerlo en modo no operación
 132:../timer.c    **** 	//deben ser stores distintos, lo hacemos con sentencias C distintas
 133:../timer.c    **** 	rTCON |=(0x2 << pos);
 2083              		.loc 1 133 0
 2084 0374 50309FE5 		ldr	r3, .L34
 2085 0378 4C209FE5 		ldr	r2, .L34
 2086 037c 001092E5 		ldr	r1, [r2, #0]
 2087 0380 0200A0E3 		mov	r0, #2
 2088 0384 10201BE5 		ldr	r2, [fp, #-16]
 2089 0388 1022A0E1 		mov	r2, r0, asl r2
 2090 038c 022081E1 		orr	r2, r1, r2
 2091 0390 002083E5 		str	r2, [r3, #0]
 134:../timer.c    **** 	rTCON &=~(0x2 << pos);
 2092              		.loc 1 134 0
 2093 0394 30309FE5 		ldr	r3, .L34
 2094 0398 2C209FE5 		ldr	r2, .L34
 2095 039c 001092E5 		ldr	r1, [r2, #0]
 2096 03a0 0200A0E3 		mov	r0, #2
 2097 03a4 10201BE5 		ldr	r2, [fp, #-16]
 2098 03a8 1022A0E1 		mov	r2, r0, asl r2
 2099 03ac 0220E0E1 		mvn	r2, r2
 2100 03b0 022001E0 		and	r2, r1, r2
 2101 03b4 002083E5 		str	r2, [r3, #0]
 135:../timer.c    **** 	return 0;
 2102              		.loc 1 135 0
 2103 03b8 0030A0E3 		mov	r3, #0
 2104              	.L33:
 136:../timer.c    **** }
 2105              		.loc 1 136 0
 2106 03bc 0300A0E1 		mov	r0, r3
 2107 03c0 0CD04BE2 		sub	sp, fp, #12
 2108 03c4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2109 03c8 1EFF2FE1 		bx	lr
 2110              	.L35:
 2111              		.align	2
 2112              	.L34:
 2113 03cc 0800D501 		.word	30736392
 2114              		.cfi_endproc
 2115              	.LFE3:
 2117              		.align	2
 2118              		.global	tmr_set_mode
 2120              	tmr_set_mode:
 2121              	.LFB4:
 137:../timer.c    **** 
 138:../timer.c    **** int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
 139:../timer.c    **** {
 2122              		.loc 1 139 0
 2123              		.cfi_startproc
 2124              		@ Function supports interworking.
 2125              		@ args = 0, pretend = 0, frame = 16
 2126              		@ frame_needed = 1, uses_anonymous_args = 0
 2127 03d0 0DC0A0E1 		mov	ip, sp
 2128              	.LCFI8:
 2129              		.cfi_def_cfa_register 12
 2130 03d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2131 03d8 04B04CE2 		sub	fp, ip, #4
 2132              		.cfi_offset 14, -8
 2133              		.cfi_offset 13, -12
 2134              		.cfi_offset 11, -16
 2135              	.LCFI9:
 2136              		.cfi_def_cfa 11, 4
 2137 03dc 10D04DE2 		sub	sp, sp, #16
 2138 03e0 0020A0E1 		mov	r2, r0
 2139 03e4 0130A0E1 		mov	r3, r1
 2140 03e8 15204BE5 		strb	r2, [fp, #-21]
 2141 03ec 16304BE5 		strb	r3, [fp, #-22]
 140:../timer.c    **** 	int err = 0;
 2142              		.loc 1 140 0
 2143 03f0 0030A0E3 		mov	r3, #0
 2144 03f4 10300BE5 		str	r3, [fp, #-16]
 141:../timer.c    **** 	int pos = t*4;
 2145              		.loc 1 141 0
 2146 03f8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2147 03fc 0331A0E1 		mov	r3, r3, asl #2
 2148 0400 14300BE5 		str	r3, [fp, #-20]
 142:../timer.c    **** 	if (t > 0)
 2149              		.loc 1 142 0
 2150 0404 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2151 0408 000053E3 		cmp	r3, #0
 2152 040c 0200000A 		beq	.L37
 143:../timer.c    **** 		pos += 4;
 2153              		.loc 1 143 0
 2154 0410 14301BE5 		ldr	r3, [fp, #-20]
 2155 0414 043083E2 		add	r3, r3, #4
 2156 0418 14300BE5 		str	r3, [fp, #-20]
 2157              	.L37:
 144:../timer.c    **** 
 145:../timer.c    **** 	if (t < 0 || t > 5)
 2158              		.loc 1 145 0
 2159 041c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2160 0420 050053E3 		cmp	r3, #5
 2161 0424 0100009A 		bls	.L38
 146:../timer.c    **** 		return -1;
 2162              		.loc 1 146 0
 2163 0428 0030E0E3 		mvn	r3, #0
 2164 042c 1B0000EA 		b	.L39
 2165              	.L38:
 147:../timer.c    **** 
 148:../timer.c    **** 	if (mode == ONE_SHOT){
 2166              		.loc 1 148 0
 2167 0430 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2168 0434 000053E3 		cmp	r3, #0
 2169 0438 0900001A 		bne	.L40
 149:../timer.c    **** 		//COMPLETAR: poner a 0 el bit autoreload de rTCON a partir de la posición pos (es
 150:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 151:../timer.c    **** 		rTCON &= ~(0x8 << pos);
 2170              		.loc 1 151 0
 2171 043c 6C309FE5 		ldr	r3, .L43
 2172 0440 68209FE5 		ldr	r2, .L43
 2173 0444 001092E5 		ldr	r1, [r2, #0]
 2174 0448 0800A0E3 		mov	r0, #8
 2175 044c 14201BE5 		ldr	r2, [fp, #-20]
 2176 0450 1022A0E1 		mov	r2, r0, asl r2
 2177 0454 0220E0E1 		mvn	r2, r2
 2178 0458 022001E0 		and	r2, r1, r2
 2179 045c 002083E5 		str	r2, [r3, #0]
 2180 0460 0D0000EA 		b	.L41
 2181              	.L40:
 152:../timer.c    **** 
 153:../timer.c    **** 	}
 154:../timer.c    **** 	else if (mode == RELOAD){
 2182              		.loc 1 154 0
 2183 0464 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2184 0468 010053E3 		cmp	r3, #1
 2185 046c 0800001A 		bne	.L42
 155:../timer.c    **** 		//COMPLETAR: poner a 1 el bit autoreload a partir de la posición pos (es
 156:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 157:../timer.c    **** 		rTCON |=(0x8 << pos);
 2186              		.loc 1 157 0
 2187 0470 38309FE5 		ldr	r3, .L43
 2188 0474 34209FE5 		ldr	r2, .L43
 2189 0478 001092E5 		ldr	r1, [r2, #0]
 2190 047c 0800A0E3 		mov	r0, #8
 2191 0480 14201BE5 		ldr	r2, [fp, #-20]
 2192 0484 1022A0E1 		mov	r2, r0, asl r2
 2193 0488 022081E1 		orr	r2, r1, r2
 2194 048c 002083E5 		str	r2, [r3, #0]
 2195 0490 010000EA 		b	.L41
 2196              	.L42:
 158:../timer.c    **** 
 159:../timer.c    **** 	}
 160:../timer.c    **** 	else
 161:../timer.c    **** 		err = -1;
 2197              		.loc 1 161 0
 2198 0494 0030E0E3 		mvn	r3, #0
 2199 0498 10300BE5 		str	r3, [fp, #-16]
 2200              	.L41:
 162:../timer.c    **** 
 163:../timer.c    **** 	return err;
 2201              		.loc 1 163 0
 2202 049c 10301BE5 		ldr	r3, [fp, #-16]
 2203              	.L39:
 164:../timer.c    **** }
 2204              		.loc 1 164 0
 2205 04a0 0300A0E1 		mov	r0, r3
 2206 04a4 0CD04BE2 		sub	sp, fp, #12
 2207 04a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2208 04ac 1EFF2FE1 		bx	lr
 2209              	.L44:
 2210              		.align	2
 2211              	.L43:
 2212 04b0 0800D501 		.word	30736392
 2213              		.cfi_endproc
 2214              	.LFE4:
 2216              		.align	2
 2217              		.global	tmr_start
 2219              	tmr_start:
 2220              	.LFB5:
 165:../timer.c    **** 
 166:../timer.c    **** int tmr_start(enum tmr_timer t)
 167:../timer.c    **** {
 2221              		.loc 1 167 0
 2222              		.cfi_startproc
 2223              		@ Function supports interworking.
 2224              		@ args = 0, pretend = 0, frame = 16
 2225              		@ frame_needed = 1, uses_anonymous_args = 0
 2226 04b4 0DC0A0E1 		mov	ip, sp
 2227              	.LCFI10:
 2228              		.cfi_def_cfa_register 12
 2229 04b8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2230 04bc 04B04CE2 		sub	fp, ip, #4
 2231              		.cfi_offset 14, -8
 2232              		.cfi_offset 13, -12
 2233              		.cfi_offset 11, -16
 2234              	.LCFI11:
 2235              		.cfi_def_cfa 11, 4
 2236 04c0 10D04DE2 		sub	sp, sp, #16
 2237 04c4 0030A0E1 		mov	r3, r0
 2238 04c8 15304BE5 		strb	r3, [fp, #-21]
 168:../timer.c    **** 	int pos = t*4;
 2239              		.loc 1 168 0
 2240 04cc 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2241 04d0 0331A0E1 		mov	r3, r3, asl #2
 2242 04d4 10300BE5 		str	r3, [fp, #-16]
 169:../timer.c    **** 	if (t > 0)
 2243              		.loc 1 169 0
 2244 04d8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2245 04dc 000053E3 		cmp	r3, #0
 2246 04e0 0200000A 		beq	.L46
 170:../timer.c    **** 		pos += 4;
 2247              		.loc 1 170 0
 2248 04e4 10301BE5 		ldr	r3, [fp, #-16]
 2249 04e8 043083E2 		add	r3, r3, #4
 2250 04ec 10300BE5 		str	r3, [fp, #-16]
 2251              	.L46:
 171:../timer.c    **** 
 172:../timer.c    **** 	if (t < 0 || t > 5)
 2252              		.loc 1 172 0
 2253 04f0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2254 04f4 050053E3 		cmp	r3, #5
 2255 04f8 0100009A 		bls	.L47
 173:../timer.c    **** 		return -1;
 2256              		.loc 1 173 0
 2257 04fc 0030E0E3 		mvn	r3, #0
 2258 0500 080000EA 		b	.L48
 2259              	.L47:
 174:../timer.c    **** 
 175:../timer.c    **** 	//COMPLETAR: Dar el valor adecuado al bit de start para arrancar el TIMER a partir de la posición
 176:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 177:../timer.c    **** 	rTCON |= (0x1 << pos);
 2260              		.loc 1 177 0
 2261 0504 2C309FE5 		ldr	r3, .L49
 2262 0508 28209FE5 		ldr	r2, .L49
 2263 050c 001092E5 		ldr	r1, [r2, #0]
 2264 0510 0100A0E3 		mov	r0, #1
 2265 0514 10201BE5 		ldr	r2, [fp, #-16]
 2266 0518 1022A0E1 		mov	r2, r0, asl r2
 2267 051c 022081E1 		orr	r2, r1, r2
 2268 0520 002083E5 		str	r2, [r3, #0]
 178:../timer.c    **** 
 179:../timer.c    **** 	return 0;
 2269              		.loc 1 179 0
 2270 0524 0030A0E3 		mov	r3, #0
 2271              	.L48:
 180:../timer.c    **** }
 2272              		.loc 1 180 0
 2273 0528 0300A0E1 		mov	r0, r3
 2274 052c 0CD04BE2 		sub	sp, fp, #12
 2275 0530 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2276 0534 1EFF2FE1 		bx	lr
 2277              	.L50:
 2278              		.align	2
 2279              	.L49:
 2280 0538 0800D501 		.word	30736392
 2281              		.cfi_endproc
 2282              	.LFE5:
 2284              		.align	2
 2285              		.global	tmr_stop
 2287              	tmr_stop:
 2288              	.LFB6:
 181:../timer.c    **** 
 182:../timer.c    **** int tmr_stop(enum tmr_timer t)
 183:../timer.c    **** {
 2289              		.loc 1 183 0
 2290              		.cfi_startproc
 2291              		@ Function supports interworking.
 2292              		@ args = 0, pretend = 0, frame = 16
 2293              		@ frame_needed = 1, uses_anonymous_args = 0
 2294 053c 0DC0A0E1 		mov	ip, sp
 2295              	.LCFI12:
 2296              		.cfi_def_cfa_register 12
 2297 0540 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2298 0544 04B04CE2 		sub	fp, ip, #4
 2299              		.cfi_offset 14, -8
 2300              		.cfi_offset 13, -12
 2301              		.cfi_offset 11, -16
 2302              	.LCFI13:
 2303              		.cfi_def_cfa 11, 4
 2304 0548 10D04DE2 		sub	sp, sp, #16
 2305 054c 0030A0E1 		mov	r3, r0
 2306 0550 15304BE5 		strb	r3, [fp, #-21]
 184:../timer.c    **** 	int pos = t*4;
 2307              		.loc 1 184 0
 2308 0554 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2309 0558 0331A0E1 		mov	r3, r3, asl #2
 2310 055c 10300BE5 		str	r3, [fp, #-16]
 185:../timer.c    **** 	if (t > 0)
 2311              		.loc 1 185 0
 2312 0560 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2313 0564 000053E3 		cmp	r3, #0
 2314 0568 0200000A 		beq	.L52
 186:../timer.c    **** 		pos += 4;
 2315              		.loc 1 186 0
 2316 056c 10301BE5 		ldr	r3, [fp, #-16]
 2317 0570 043083E2 		add	r3, r3, #4
 2318 0574 10300BE5 		str	r3, [fp, #-16]
 2319              	.L52:
 187:../timer.c    **** 
 188:../timer.c    **** 	if (t < 0 || t > 5)
 2320              		.loc 1 188 0
 2321 0578 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2322 057c 050053E3 		cmp	r3, #5
 2323 0580 0100009A 		bls	.L53
 189:../timer.c    **** 		return -1;
 2324              		.loc 1 189 0
 2325 0584 0030E0E3 		mvn	r3, #0
 2326 0588 090000EA 		b	.L54
 2327              	.L53:
 190:../timer.c    **** 
 191:../timer.c    **** 	//COMPLETAR:  Dar el valor adecuado al bit de start para parar el TIMER a partir de la posición p
 192:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 193:../timer.c    **** 
 194:../timer.c    **** 	rTCON &=~(0x1 << pos);
 2328              		.loc 1 194 0
 2329 058c 30309FE5 		ldr	r3, .L55
 2330 0590 2C209FE5 		ldr	r2, .L55
 2331 0594 001092E5 		ldr	r1, [r2, #0]
 2332 0598 0100A0E3 		mov	r0, #1
 2333 059c 10201BE5 		ldr	r2, [fp, #-16]
 2334 05a0 1022A0E1 		mov	r2, r0, asl r2
 2335 05a4 0220E0E1 		mvn	r2, r2
 2336 05a8 022001E0 		and	r2, r1, r2
 2337 05ac 002083E5 		str	r2, [r3, #0]
 195:../timer.c    **** 
 196:../timer.c    **** 	return 0;
 2338              		.loc 1 196 0
 2339 05b0 0030A0E3 		mov	r3, #0
 2340              	.L54:
 197:../timer.c    **** }
 2341              		.loc 1 197 0
 2342 05b4 0300A0E1 		mov	r0, r3
 2343 05b8 0CD04BE2 		sub	sp, fp, #12
 2344 05bc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2345 05c0 1EFF2FE1 		bx	lr
 2346              	.L56:
 2347              		.align	2
 2348              	.L55:
 2349 05c4 0800D501 		.word	30736392
 2350              		.cfi_endproc
 2351              	.LFE6:
 2353              		.align	2
 2354              		.global	tmr_isrunning
 2356              	tmr_isrunning:
 2357              	.LFB7:
 198:../timer.c    **** 
 199:../timer.c    **** int tmr_isrunning(enum tmr_timer t)
 200:../timer.c    **** {
 2358              		.loc 1 200 0
 2359              		.cfi_startproc
 2360              		@ Function supports interworking.
 2361              		@ args = 0, pretend = 0, frame = 16
 2362              		@ frame_needed = 1, uses_anonymous_args = 0
 2363 05c8 0DC0A0E1 		mov	ip, sp
 2364              	.LCFI14:
 2365              		.cfi_def_cfa_register 12
 2366 05cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2367 05d0 04B04CE2 		sub	fp, ip, #4
 2368              		.cfi_offset 14, -8
 2369              		.cfi_offset 13, -12
 2370              		.cfi_offset 11, -16
 2371              	.LCFI15:
 2372              		.cfi_def_cfa 11, 4
 2373 05d4 10D04DE2 		sub	sp, sp, #16
 2374 05d8 0030A0E1 		mov	r3, r0
 2375 05dc 15304BE5 		strb	r3, [fp, #-21]
 201:../timer.c    **** 	int ret = 0;
 2376              		.loc 1 201 0
 2377 05e0 0030A0E3 		mov	r3, #0
 2378 05e4 10300BE5 		str	r3, [fp, #-16]
 202:../timer.c    **** 	int pos = t*4;
 2379              		.loc 1 202 0
 2380 05e8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2381 05ec 0331A0E1 		mov	r3, r3, asl #2
 2382 05f0 14300BE5 		str	r3, [fp, #-20]
 203:../timer.c    **** 	if (t > 0)
 2383              		.loc 1 203 0
 2384 05f4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2385 05f8 000053E3 		cmp	r3, #0
 2386 05fc 0200000A 		beq	.L58
 204:../timer.c    **** 		pos += 4;
 2387              		.loc 1 204 0
 2388 0600 14301BE5 		ldr	r3, [fp, #-20]
 2389 0604 043083E2 		add	r3, r3, #4
 2390 0608 14300BE5 		str	r3, [fp, #-20]
 2391              	.L58:
 205:../timer.c    **** 
 206:../timer.c    **** 	if ((t >= 0) && (t <= 5) 
 2392              		.loc 1 206 0
 2393 060c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2394 0610 050053E3 		cmp	r3, #5
 2395 0614 0900008A 		bhi	.L59
 207:../timer.c    **** 			&& (rTCON & (0x1 << pos)))
 2396              		.loc 1 207 0
 2397 0618 34309FE5 		ldr	r3, .L60
 2398 061c 002093E5 		ldr	r2, [r3, #0]
 2399 0620 0110A0E3 		mov	r1, #1
 2400 0624 14301BE5 		ldr	r3, [fp, #-20]
 2401 0628 1133A0E1 		mov	r3, r1, asl r3
 2402 062c 033002E0 		and	r3, r2, r3
 2403 0630 000053E3 		cmp	r3, #0
 2404 0634 0100000A 		beq	.L59
 208:../timer.c    **** 		ret = 1;
 2405              		.loc 1 208 0
 2406 0638 0130A0E3 		mov	r3, #1
 2407 063c 10300BE5 		str	r3, [fp, #-16]
 2408              	.L59:
 209:../timer.c    **** 
 210:../timer.c    **** 	return ret;
 2409              		.loc 1 210 0
 2410 0640 10301BE5 		ldr	r3, [fp, #-16]
 211:../timer.c    **** }
 2411              		.loc 1 211 0
 2412 0644 0300A0E1 		mov	r0, r3
 2413 0648 0CD04BE2 		sub	sp, fp, #12
 2414 064c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2415 0650 1EFF2FE1 		bx	lr
 2416              	.L61:
 2417              		.align	2
 2418              	.L60:
 2419 0654 0800D501 		.word	30736392
 2420              		.cfi_endproc
 2421              	.LFE7:
 2423              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1698   .text:00000000 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1701   .text:00000000 tmr_set_prescaler
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1789   .text:000000d8 $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1793   .text:000000dc $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1796   .text:000000dc tmr_set_divider
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1904   .text:000001ec $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1908   .text:000001f0 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1911   .text:000001f0 tmr_set_count
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1942   .text:00000228 $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:1950   .text:00000240 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2025   .text:000002f8 $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2039   .text:00000324 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2042   .text:00000324 tmr_update
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2113   .text:000003cc $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2117   .text:000003d0 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2120   .text:000003d0 tmr_set_mode
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2212   .text:000004b0 $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2216   .text:000004b4 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2219   .text:000004b4 tmr_start
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2280   .text:00000538 $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2284   .text:0000053c $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2287   .text:0000053c tmr_stop
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2349   .text:000005c4 $d
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2353   .text:000005c8 $a
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2356   .text:000005c8 tmr_isrunning
C:\Users\ROCO~1\AppData\Local\Temp\ccAhxQbf.s:2419   .text:00000654 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
